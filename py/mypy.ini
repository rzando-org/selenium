; The aim in future here is we would be able to turn (most) of these flags on, however the typing technical
; debt is quite colossal right now.  For now we should maybe get everything working with the config here
; then look at going after partially or completely untyped defs as a phase-2.
[mypy]
files = selenium
; warn about per-module sections in the config file that do not match any files processed.
warn_unused_configs = True
; disallows subclassing of typing.Any.
disallow_subclassing_any = False
; disallow usage of generic types that do not specify explicit type parameters.
disallow_any_generics = False
; disallow calling functions without type annotations from functions that have type annotations.
disallow_untyped_calls = False
; disallow defining functions without type annotations or with incomplete annotations.
disallow_untyped_defs = False
; disallow defining functions with incomplete type annotations.
disallow_incomplete_defs = False
; type-checks the interior of functions without type annotations.
check_untyped_defs = False
; reports an error whenever a function with type annotations is decorated with a decorator without annotations.
disallow_untyped_decorators = False
; changes the treatment of arguments with a default value of None by not implicitly making their type `typing.Optional`.
no_implicit_optional = False
; warns about casting an expression to it's inferred type.
warn_redundant_casts = True
; warns about unneeded `# type: ignore` comments.
warn_unused_ignores = True
; warns when returning a value with typing.Any from a function with a non typing.Any return type.
warn_return_any = False
; Shows a warning when encountering any code inferred to be unreachable after performing type analysis.
warn_unreachable = False

[mypy-trio_websocket]
; suppress error messages about imports that cannot be resolved.
ignore_missing_imports = True

[mypy-_winreg]
; suppress error messages about imports that cannot be resolved.
ignore_missing_imports = True
